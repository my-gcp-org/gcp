name: 'HashiCorp - Setup Terraform'
on: push
jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: tf-run
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
        terraform_version: 0.12.25
        terraform_wrapper: false
    
    # - id: fmt
    #   run: terraform fmt
    #   continue-on-error: true
    # - id: init
    #   run: terraform init
    #   continue-on-error: true
    # - id: validate
    #   run: terraform validate -no-color
    #   continue-on-error: true
    # - id: plan
    #   run: terraform plan -no-color
    #   continue-on-error: true
    # - run: echo ${{ steps.plan.outputs.stdout }}
    # - run: echo ${{ steps.plan.outputs.stderr }}
    # - run: echo ${{ steps.plan.outputs.exitcode }}
    # - run: echo ${{ steps.plan.outputs.exitcode }}
    
    # defaults:
    #   - id: github-tf
    #     run:
    #     working-directory: ${{ env.tf_actions_working_dir }}

    #     - uses: actions/github-script@0.9.0
    #       if: github.event_name == 'pull_request'
    #       env:
    #         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    #       with:
    #         github-token: ${{ secrets.GITHUB_TOKEN }}
    #         script: |
    #           const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #           #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #           #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
    #           #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
              
    #           <details><summary>Show Plan</summary>
              
    #           \`\`\`${process.env.PLAN}\`\`\`
              
    #           </details>
              
    #           *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
                
    #           github.issues.createComment({
    #             issue_number: context.issue.number,
    #             owner: context.repo.owner,
    #             repo: context.repo.repo,
    #             body: output
    #           })